#pragma once

enum class PLAYER_ID {
  LOCAL = 0,
  NEUTRAL_PASSIVE = 15,
  NEUTRAL_AGGRESSIVE = 12,
};

enum class PLAYER_COLOR {
  RED = 0,
  BLUE = 1,
  CYAN = 2,
  PURPLE = 3,
  YELLOW = 4,
  ORANGE = 5,
  GREEN = 6,
  PINK = 7,
  LIGHT_GRAY = 8,
  LIGHT_BLUE = 9,
  AQUA = 10,
  BROWN = 11,
};

enum class RACE {
  HUMAN = 1,
  ORC = 2,
  UNDEAD = 3,
  NIGHTELF = 4,
  DEMON = 5,
  OTHER = 7,
};

enum class GAME_RESULT {
  VICTORY,
  DEFEAT,
  TIE,
  NEUTRAL,
};

enum class ALLIANCE_TYPE {
  PASSIVE,
  HELP_REQUEST,
  HELP_RESPONSE,
  SHARED_XP,
  SHARED_SPELLS,
  SHARED_VISION,
  SHARED_CONTROL,
  SHARED_ADVANCED_CONTROL,
  RESCUABLE,
  SHARED_VISION_FORCED,
};

enum class DLC_VERSION {
  REIGN_OF_CHAOS,
  FROZEN_THRONE,
};

enum class ATTACK_TYPE {
  NORMAL,
  MELEE,
  PIERCE,
  SIEGE,
  MAGIC,
  CHAOS,
  HERO,
};

enum class DAMAGE_TYPE {
  UNKNOWN = 0,
  NORMAL = 4,
  ENHANCED = 5,
  FIRE = 8,
  COLD = 9,
  LIGHTNING = 10,
  POISON = 11,
  DISEASE = 12,
  DIVINE = 13,
  MAGIC = 14,
  SONIC = 15,
  ACID = 16,
  FORCE = 17,
  DEATH = 18,
  MIND = 19,
  PLANT = 20,
  DEFENSIVE = 21,
  DEMOLITION = 22,
  SLOW_POISON = 23,
  SPIRIT_LINK = 24,
  SHADOW_STRIKE = 25,
  UNIVERSAL = 26,
};

enum class WEAPON_TYPE {
  WHOKNOWS = 0,
  METAL_LIGHT_CHOP = 1,
  METAL_MEDIUM_CHOP = 2,
  METAL_HEAVY_CHOP = 3,
  METAL_LIGHT_SLICE = 4,
  METAL_MEDIUM_SLICE = 5,
  METAL_HEAVY_SLICE = 6,
  METAL_MEDIUM_BASH = 7,
  METAL_HEAVY_BASH = 8,
  METAL_MEDIUM_STAB = 9,
  METAL_HEAVY_STAB = 10,
  WOOD_LIGHT_SLICE = 11,
  WOOD_MEDIUM_SLICE = 12,
  WOOD_HEAVY_SLICE = 13,
  WOOD_LIGHT_BASH = 14,
  WOOD_MEDIUM_BASH = 15,
  WOOD_HEAVY_BASH = 16,
  WOOD_LIGHT_STAB = 17,
  WOOD_MEDIUM_STAB = 18,
  CLAW_LIGHT_SLICE = 19,
  CLAW_MEDIUM_SLICE = 20,
  CLAW_HEAVY_SLICE = 21,
  AXE_MEDIUM_CHOP = 22,
  ROCK_HEAVY_BASH = 23,
};

enum class PATHING_TYPE {
  ANY,
  WALKABILITY,
  FLYABILITY,
  BUILDABILITY,
  PEONHARVESTPATHING,
  BLIGHTPATHING,
  FLOATABILITY,
  AMPHIBIOUSPATHING,
};

enum class PLAYER_SLOT_STATE {
  EMPTY,
  PLAYING,
  LEFT,
};

enum class GAME_STATE {
  DIVINE_INTERVENTION,
  DISCONNECTED,
  TIME_OF_DAY,
};

enum class PLAYER_STATE {
  GAME_RESULT,
  RESOURCE_GOLD,
  RESOURCE_LUMBER,
  RESOURCE_HERO_TOKENS,
  RESOURCE_FOOD_CAP,
  RESOURCE_FOOD_USED,
  FOOD_CAP_CEILING,
  GIVES_BOUNTY,
  ALLIED_VICTORY,
  PLACED,
  OBSERVER_ON_DEATH,
  OBSERVER,
  UNFOLLOWABLE,
  GOLD_UPKEEP_RATE,
  LUMBER_UPKEEP_RATE,
  GOLD_GATHERED,
  LUMBER_GATHERED,
  NO_CREEP_SLEEP = 25,
};

enum class UNIT_STATE {
  LIFE,
  MAX_LIFE,
  MANA,
  MAX_MANA,
};

enum class AI_DIFFICULTY {
  NEWBIE,
  NORMAL,
  INSANE,
};

enum class PLAYER_SCORE {
  UNITS_TRAINED,
  UNITS_KILLED,
  STRUCT_BUILT,
  STRUCT_RAZED,
  TECH_PERCENT,
  FOOD_MAXPROD,
  FOOD_MAXUSED,
  HEROES_KILLED,
  ITEMS_GAINED,
  MERCS_HIRED,
  GOLD_MINED_TOTAL,
  GOLD_MINED_UPKEEP,
  GOLD_LOST_UPKEEP,
  GOLD_LOST_TAX,
  GOLD_GIVEN,
  GOLD_RECEIVED,
  LUMBER_TOTAL,
  LUMBER_LOST_UPKEEP,
  LUMBER_LOST_TAX,
  LUMBER_GIVEN,
  LUMBER_RECEIVED,
  UNIT_TOTAL,
  HERO_TOTAL,
  RESOURCE_TOTAL,
  TOTAL,
};

enum class LIMIT_OP {
  LESS_THAN,
  LESS_THAN_OR_EQUAL,
  EQUAL,
  GREATER_THAN_OR_EQUAL,
  GREATER_THAN,
  NOT_EQUAL,
};

enum class UNIT_TYPE {
  HERO,
  DEAD,
  STRUCTURE,

  FLYING,
  GROUND,

  ATTACKS_FLYING,
  ATTACKS_GROUND,

  MELEE_ATTACKER,
  RANGED_ATTACKER,

  GIANT,
  SUMMONED,
  STUNNED,
  PLAGUED,
  SNARED,

  UNDEAD,
  MECHANICAL,
  PEON,
  SAPPER,
  TOWNHALL,
  ANCIENT,

  TAUREN,
  POISONED,
  POLYMORPHED,
  SLEEPING,
  RESISTANT,
  ETHEREAL,
  MAGIC_IMMUNE,
};

enum class ITEM_TYPE {
  PERMANENT,
  CHARGED,
  POWERUP,
  ARTIFACT,
  PURCHASABLE,
  CAMPAIGN,
  MISCELLANEOUS,
  UNKNOWN,
  ANY,
};

// Event Id

//===================================================
// For use with TriggerRegisterGameEvent    
//===================================================    
enum class EVENT_GAME {
  VICTORY = 0,
  END_LEVEL = 1,

  VARIABLE_LIMIT = 2,
  STATE_LIMIT = 3,

  TIMER_EXPIRED = 4,

  ENTER_REGION = 5,
  LEAVE_REGION = 6,

  TRACKABLE_HIT = 7,
  TRACKABLE_TRACK = 8,

  SHOW_SKILL = 9,
  BUILD_SUBMENU = 10,

  LOADED = 256,
  TOURNAMENT_FINISH_SOON = 257,
  TOURNAMENT_FINISH_NOW = 258,
  SAVE = 259,
};

//===================================================
// For use with TriggerRegisterPlayerEvent
//===================================================
enum class EVENT_PLAYER {
  STATE_LIMIT = 11,
  ALLIANCE_CHANGED = 12,

  DEFEAT = 13,
  VICTORY = 14,
  LEAVE = 15,
  CHAT = 16,
  END_CINEMATIC = 17,

  ARROW_LEFT_DOWN = 261,
  ARROW_LEFT_UP = 262,
  ARROW_RIGHT_DOWN = 263,
  ARROW_RIGHT_UP = 264,
  ARROW_DOWN_DOWN = 265,
  ARROW_DOWN_UP = 266,
  ARROW_UP_DOWN = 267,
  ARROW_UP_UP = 268,
};

//===================================================
// For use with TriggerRegisterPlayerUnitEvent
//===================================================
enum class EVENT_PLAYER_UNIT {
  ATTACKED = 18,
  RESCUED = 19,

  DEATH = 20,
  DECAY = 21,

  DETECTED = 22,
  HIDDEN = 23,

  SELECTED = 24,
  DESELECTED = 25,

  CONSTRUCT_START = 26,
  CONSTRUCT_CANCEL = 27,
  CONSTRUCT_FINISH = 28,

  UPGRADE_START = 29,
  UPGRADE_CANCEL = 30,
  UPGRADE_FINISH = 31,

  TRAIN_START = 32,
  TRAIN_CANCEL = 33,
  TRAIN_FINISH = 34,

  RESEARCH_START = 35,
  RESEARCH_CANCEL = 36,
  RESEARCH_FINISH = 37,
  ISSUED_ORDER = 38,
  ISSUED_POINT_ORDER = 39,
  ISSUED_TARGET_ORDER = 40,
  ISSUED_UNIT_ORDER = 40,    // for compat

  SUMMON = 47,
  DROP_ITEM = 48,
  PICKUP_ITEM = 49,
  USE_ITEM = 50,

  LOADED = 51,

  SELL = 269,
  CHANGE_OWNER = 270,
  SELL_ITEM = 271,
  SPELL_CHANNEL = 272,
  SPELL_CAST = 273,
  SPELL_EFFECT = 274,
  SPELL_FINISH = 275,
  SPELL_ENDCAST = 276,
  PAWN_ITEM = 277,
};

enum class EVENT_PLAYER_HERO {
  LEVEL = 41,
  SKILL = 42,

  REVIVABLE = 43,

  REVIVE_START = 44,
  REVIVE_CANCEL = 45,
  REVIVE_FINISH = 46,
};

//===================================================
// For use with TriggerRegisterUnitEvent
//===================================================

enum class EVENT_UNIT {
  DAMAGED = 52,
  DEATH = 53,
  DECAY = 54,
  DETECTED = 55,
  HIDDEN = 56,
  SELECTED = 57,
  DESELECTED = 58,

  STATE_LIMIT = 59,

  // Events which may have a filter for the "other unit"              
  //                                                                  
  ACQUIRED_TARGET = 60,
  TARGET_IN_RANGE = 61,
  ATTACKED = 62,
  RESCUED = 63,

  CONSTRUCT_CANCEL = 64,
  CONSTRUCT_FINISH = 65,

  UPGRADE_START = 66,
  UPGRADE_CANCEL = 67,
  UPGRADE_FINISH = 68,

  // Events which involve the specified unit performing               
  // training of other units                                          
  //                                                                  
  TRAIN_START = 69,
  TRAIN_CANCEL = 70,
  TRAIN_FINISH = 71,

  RESEARCH_START = 72,
  RESEARCH_CANCEL = 73,
  RESEARCH_FINISH = 74,

  ISSUED_ORDER = 75,
  ISSUED_POINT_ORDER = 76,
  ISSUED_TARGET_ORDER = 77,

  HERO_LEVEL = 78,
  HERO_SKILL = 79,

  SUMMON = 84,

  DROP_ITEM = 85,
  PICKUP_ITEM = 86,
  USE_ITEM = 87,

  LOADED = 88,

  SELL = 286,
  CHANGE_OWNER = 287,
  SELL_ITEM = 288,
  SPELL_CHANNEL = 289,
  SPELL_CAST = 290,
  SPELL_EFFECT = 291,
  SPELL_FINISH = 292,
  SPELL_ENDCAST = 293,
  PAWN_ITEM = 294,
};

enum class EVENT_HERO {
  HERO_REVIVABLE = 80,
  HERO_REVIVE_START = 81,
  HERO_REVIVE_CANCEL = 82,
  HERO_REVIVE_FINISH = 83,
};

enum class EVENT_WIDGET {
  DEATH = 89,
};

enum class EVENT_DIALOG_BUTTON {
  CLICK = 90,
};

enum class EVENT_DIALOG {
  CLICK = 91,
};
